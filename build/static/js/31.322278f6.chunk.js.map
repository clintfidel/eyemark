{"version":3,"sources":["modules/CreateAccount/pages/Screen4/index.jsx"],"names":["Screen4","history","t","useTranslation","imgRef","useRef","useState","upImg","setUpImg","upload","setUpload","done","setDone","unit","width","aspect","crop","setCrop","previewCanvasRef","completedCrop","setCompletedCrop","image","setImage","useEffect","current","canvas","scaleX","naturalWidth","scaleY","naturalHeight","height","ctx","getContext","pixelRatio","window","devicePixelRatio","setTransform","imageSmoothingQuality","drawImage","x","y","onLoad","useCallback","img","className","style","backgroundImage","Background2","onClick","cursor","text","base64Canvas","toDataURL","generateDownload","src","onImageLoaded","circularCrop","onChange","c","onComplete","borderRadius","keepSelection","locked","imageStyle","objectFit","objectPosition","ref","Math","round","display","LogoSmall","alt","push","createAccountRoutes","screen5","color","htmlFor","position","Add","type","id","name","accept","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL"],"mappings":"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","file":"static/js/31.322278f6.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport { LogoSmall, Add } from \"assets/icons(svg)\";\nimport { Background2 } from \"assets/images(png)\";\nimport { Helmet } from \"react-helmet\";\nimport { Button } from \"components\";\nimport { createAccountRoutes } from \"routes/routes-list\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport { useTranslation } from \"react-i18next\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport \"./style.scss\";\n\nexport function Screen4({ history }) {\n  const { t } = useTranslation();\n  const imgRef = useRef(null);\n  const [upImg, setUpImg] = useState();\n  const [upload, setUpload] = useState(false);\n  const [done, setDone] = useState(false);\n  const [crop, setCrop] = useState({ unit: \"%\", width: 80, aspect: 1 });\n  const previewCanvasRef = useRef(null);\n  const [completedCrop, setCompletedCrop] = useState(null);\n  const [image, setImage] = useState();\n  const generateDownload = (canvas, crop) => {\n    if (!crop || !canvas) {\n      return;\n    }\n    const base64Canvas = canvas.toDataURL(\"image/jpeg\");\n    setImage(base64Canvas);\n  };\n  useEffect(() => {\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n      return;\n    }\n    const image = imgRef.current;\n    const canvas = previewCanvasRef.current;\n    const crop = completedCrop;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext(\"2d\");\n    const pixelRatio = window.devicePixelRatio;\n    canvas.width = crop.width * pixelRatio;\n    canvas.height = crop.height * pixelRatio;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = \"high\";\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n  }, [completedCrop]);\n\n  const onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () => setUpImg(reader.result));\n      reader.readAsDataURL(e.target.files[0]);\n      setUpload(true);\n    }\n  };\n\n  const onLoad = useCallback(img => {\n    imgRef.current = img;\n  }, []);\n\n  const reset = () => {\n    setUpload(false);\n    setDone(false);\n  };\n\n  const doneUp = () => {\n    generateDownload(previewCanvasRef.current, completedCrop);\n    setUpload(false);\n    setDone(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Eyemark - {t(\"auth:Upload Profile Picture\")}</title>\n      </Helmet>\n      <div\n        className=\"onboarding-container flex items-center justify-center placeholder\"\n        style={{ backgroundImage: `url(${Background2})` }}\n      >\n        <div className=\"card px-8 py-8 overflow-hidden relative\">\n          {!upload ? (\n            <>\n              <div className=\"flex items-center justify-between mb-10\">\n                <img src={LogoSmall} alt=\"logo\" />\n                <div style={{ width: \"139px\" }}>\n                  {!done ? (\n                    <Button\n                      text={t(\"auth:Skip for now\")}\n                      className=\"btn-outline btn-size-sm-h btn-no-bg\"\n                      onClick={() => history.push(`/onboarding/${createAccountRoutes.screen5}`)}\n                    />\n                  ) : null}\n                </div>\n              </div>\n              <p className=\"text-base font-semibold mb-2.5\">{t(\"auth:Upload a profile picture\")}</p>\n              <p className=\"text-sm font-medium mb-14 w-96 subtitle\" style={{ color: \"#4B5667\" }}>\n                Lorem ipsum dolor sit amet, nonummy nibh euismod tincidunt ut laoreet dolore magna{\" \"}\n              </p>\n              <div className=\"flex w-full items-center justify-center\">\n                <label htmlFor=\"upload\">\n                  <div className=\"upload-container flex items-center justify-center\">\n                    {done ? (\n                      <img\n                        style={{\n                          width: \"100%\",\n                          height: \"100%\",\n                          objectFit: \"cover\",\n                          objectPosition: \"center\",\n                          position: \"absolute\"\n                        }}\n                        src={image}\n                        alt=\"profile-image\"\n                        className=\"cursor-pointer\"\n                      />\n                    ) : null}\n                    <img src={Add} alt=\"add\" className=\"cursor-pointer add-image\" />\n                    <input\n                      type=\"file\"\n                      id=\"upload\"\n                      name=\"upload\"\n                      style={{ display: \"none\" }}\n                      accept=\"image/*\"\n                      onChange={onSelectFile}\n                    />\n                  </div>\n                </label>\n              </div>\n              <div className=\"absolute bottom-0 inset-x-0 footer w-full h-20 px-6 flex items-center justify-end\">\n                {done ? (\n                  <Button\n                    text={t(\"auth:Next\")}\n                    className=\"btn-size-sm\"\n                    onClick={() => history.push(`/onboarding/${createAccountRoutes.screen5}`)}\n                  />\n                ) : null}\n              </div>\n            </>\n          ) : (\n            <>\n              <div className=\"flex items-center justify-between mb-5\">\n                <div className=\"flex items-center\">\n                  <div onClick={reset}>\n                    <ArrowBack className=\"mr-3\" style={{ cursor: \"pointer\" }} />\n                  </div>\n                  <p className=\"font-medium\">{t(\"auth:Edit picture\")}</p>\n                </div>\n                <Button text={t(\"auth:Apply\")} className=\"btn-size-sm btn-no-shadow\" onClick={doneUp} />\n              </div>\n              <div>\n                <ReactCrop\n                  src={upImg}\n                  onImageLoaded={onLoad}\n                  crop={crop}\n                  circularCrop={true}\n                  onChange={c => setCrop(c)}\n                  onComplete={c => setCompletedCrop(c)}\n                  style={{ borderRadius: \"8px\", height: \"470px\" }}\n                  keepSelection={true}\n                  locked={true}\n                  imageStyle={{ objectFit: \"cover\", objectPosition: \"center\", width: \"100%\", height: \"470px\" }}\n                />\n                <canvas\n                  ref={previewCanvasRef}\n                  style={{\n                    width: Math.round(completedCrop?.width ?? 0),\n                    height: Math.round(completedCrop?.height ?? 0),\n                    display: \"none\"\n                  }}\n                />\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Screen4;\n"],"sourceRoot":""}